let transactions	=		require("./transactions");
let adversite		=		require("./adversite");
let moreMoney		=		require("./moreMoney");

const mongo			=		require("mongoose");
mongo.connect("mongodb://bot:bot123@ds147079.mlab.com:47079/turbogram");

const QIWI			=		require("node-qiwi-api").Qiwi;
const wallet		=		new QIWI("46ff0c25906184e43a2681d3c0038298");

const admins		=		[482579901, 319797568, 657884680, 295523254];

const User			=		mongo.model("User", new mongo.Schema({
	id: Number,
	balance: Number,
	ref: Number,
	epr: Number,
	eps: Number,
	epv: Number,
	menu: String,
	adminmenu: String,
	prfUser: String,
	prp: Object,
	regDate: String,
	verify: Boolean
}));

const Channel		=		mongo.model("Channel", new mongo.Schema({
	owner: Number,
	username: String,
	completed: Array,
	count: Number
}));

const Post			=		mongo.model("Post", new mongo.Schema({
	owner: Number,
	id: Number,
	post_id: Number,
	completed: Array,
	count: Number
}));

const Ticket		=		mongo.model("Ticket", new mongo.Schema({
	owner: Number,
	wallet: Number,
	amount: Number
}));

const Unfollow		=		mongo.model("Unfollow", new mongo.Schema({
	id: Number,
	username: String
}));

const Youtube		=		mongo.model("Youtube", new mongo.Schema({
	id: Number
}));

const Ban			=		mongo.model("Ban", new mongo.Schema({
	id: Number
}));

const Telegram		=		require("node-telegram-bot-api");
const bot			=		new Telegram(
	"let transactions	=		require("./transactions");
let adversite		=		require("./adversite");
let moreMoney		=		require("./moreMoney");

const mongo			=		require("mongoose");
mongo.connect("mongodb://bot:bot123@ds147079.mlab.com:47079/turbogram");

const QIWI			=		require("node-qiwi-api").Qiwi;
const wallet		=		new QIWI("46ff0c25906184e43a2681d3c0038298");

const admins		=		[482579901, 319797568, 657884680, 295523254];

const User			=		mongo.model("User", new mongo.Schema({
	id: Number,
	balance: Number,
	ref: Number,
	epr: Number,
	eps: Number,
	epv: Number,
	menu: String,
	adminmenu: String,
	prfUser: String,
	prp: Object,
	regDate: String,
	verify: Boolean
}));

const Channel		=		mongo.model("Channel", new mongo.Schema({
	owner: Number,
	username: String,
	completed: Array,
	count: Number
}));

const Post			=		mongo.model("Post", new mongo.Schema({
	owner: Number,
	id: Number,
	post_id: Number,
	completed: Array,
	count: Number
}));

const Ticket		=		mongo.model("Ticket", new mongo.Schema({
	owner: Number,
	wallet: Number,
	amount: Number
}));

const Unfollow		=		mongo.model("Unfollow", new mongo.Schema({
	id: Number,
	username: String
}));

const Youtube		=		mongo.model("Youtube", new mongo.Schema({
	id: Number
}));

const Ban			=		mongo.model("Ban", new mongo.Schema({
	id: Number
}));

const Telegram		=		require("node-telegram-bot-api");
const bot			=		new Telegram(
	"633603037:AAHVZKDbRYq4kdWCg0jc4nDKppIRs9GFo34",
	{ polling: true }
);

setInterval(async () => {
	wallet.getOperationHistory({
		rows: 3,
		operation: "IN"
	}, async (err, res) => {
		res.data.map(async (operation) => {
			if(transactions.indexOf(operation.txnId) !== -1) return;

			if(!operation.comment) return;
			if(!operation.comment.startsWith("newprofit")) return;

			let user = await User.findOne({ id: Number(operation.comment.split("newprofit")[1]) });
			if(!user) return;

			await user.inc("balance", operation.sum.amount);
			await user.set("verify", true);
			
			bot.sendMessage(user.id, `–í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –Ω–∞ ${operation.sum.amount}—Ä`);

			transactions.push(operation.txnId);
			require("fs").writeFileSync("./transactions.json", JSON.stringify(transactions, null, "\t"));
		});
	});
}, 30000);

const settings		=		{
	pps: 0.25,
	ppv: 0.025,
	ppr: 0.10,
	ref1st: 0.20,
	ref2st: 0.10,
	min_withdraw: 15
}

const messages		=		{
	earn_select: `<b>üíé –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å</b>

üìÉ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –¥–µ–Ω—å–≥–∏.

<b>üìÆ –í–∞–∂–Ω–æ</b>: –ó–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 7 –¥–Ω–µ–π.`,
	sub_request: `‚ûï –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞ —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ.\n\nüìå <b>–í–∞–∂–Ω–æ</b>: –ù–µ –≤—ã—Ö–æ–¥–∏—Ç–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 7 –¥–Ω–µ–π.`,
	sub_no: `–ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.`,
	sub_err: `–í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!`,
	sub_end: `–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É. –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${settings.pps}‚ÇΩ üëç`,
	view_request: `üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ—Å—Ç, –æ–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è üí∏`,
	view_end: `üí∞ –ù–∞ –í–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${settings.ppv}‚ÇΩ`,
	view_no: `–ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤.`,
	pr: {
		sub: `<b>–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:</b>
		
<b>1.</b> –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞
<b>2.</b> –ü–µ—Ä–µ—Å–ª–∞—Ç—å –ª—é–±–æ–π –ø–æ—Å—Ç –∏–∑ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º
<b>3.</b> –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑`,
		view: `<b>–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º</b>`,
		sub_confirm: `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.\n1 –ø–æ–¥–ø–∏—Å—á–∏–∫ = 0.45‚ÇΩ\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑: 10 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤`,
		sub_success: `–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.`,
		sub_err_nomoney: `–û—à–∏–±–∫–∞! –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥.`,
		sub_err_noadmin: `–û—à–∏–±–∫–∞! –í—ã –Ω–µ –≤—ã–¥–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`,
		sub_err_private: `–û—à–∏–±–∫–∞! –ö–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å <b>username</b>`,
		view_confirm: `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.\n1 –ø—Ä–æ—Å–º–æ—Ç—Ä = 0.040‚ÇΩ\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑: 10 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤`,
		view_success: `–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.`,
		view_err_nomoney: `–û—à–∏–±–∫–∞! –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥.`
	}
}

const keyboards		=		{
	main: [
		["üíµ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å", "üéØ –†–∞—Å–∫—Ä—É—Ç–∏—Ç—å"],
		["üí≥ –ë–∞–ª–∞–Ω—Å", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
		["üîù –ü–∞—Ä—Ç–Ω—ë—Ä–∞–º", "üí∞ –ë–æ–ª—å—à–µ –¥–µ–Ω–µ–≥"],
		["üìß –ß–∞—Ç", "üì§ –í—ã–ø–ª–∞—Ç—ã"]
	],
	earn: [
		["‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", "üëÅ‚Äçüó® –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å"],
		["‚õîÔ∏è –û—Ç–º–µ–Ω–∞"]
	],
	pr: [
		["‚ûï –ü–æ–¥–ø–∏—Å—á–∏–∫–∏", "üëÅ‚Äçüó® –ü—Ä–æ—Å–º–æ—Ç—Ä—ã"],
		["üìß –†–∞—Å—Å—ã–ª–∫–∞"],
		["üîñ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", "üîô –ù–∞—á–∞–ª–æ"]
	],
	balance: [
		["üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å", "üì§ –í—ã–≤–µ—Å—Ç–∏"],
		["üîô –ù–∞—á–∞–ª–æ"]
	],
	cancel: [
		["‚õîÔ∏è –û—Ç–º–µ–Ω–∞"]
	],
	admin: [
		["üì¨ –†–∞—Å—Å—ã–ª–∫–∞", "üìÆ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥"],
		["üìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "üîì –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"],
		["üí∞ –ëo–ª—å—à–µ –¥–µ–Ω–µ–≥", "‚õîÔ∏è –ë–∞–Ω"],
		["‚úîÔ∏è –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è"],
		["üîô –ù–∞—á–∞–ª–æ"]
	]
}

bot.on("message", async (message) => {
	let ban = await Ban.findOne({ id: message.from.id });
	if(ban) return;

	message.send = (text, params) => bot.sendMessage(message.chat.id, text, params);
	User.findOne({ id: message.from.id }).then(async ($user) => {
		if($user) return;

		let schema = {
			id: message.from.id,
			balance: 0,
			ref: 0,
			epr: 0,
			eps: 0,
			epv: 0,
			menu: "",
			adminmenu: "",
			prfUser: "",
			prp: {},
			regDate: `${new Date().getDate()}.${new Date().getMonth() + 1}.${new Date().getFullYear()}`,
			verify: false
		}

		if(Number(message.text.split("/start ")[1])) {
			schema.ref		=		Number(message.text.split("/start ")[1]);
			bot.sendMessage(Number(message.text.split("/start ")[1]), `üìö –í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>${settings.ppr}‚ÇΩ</b> –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ <a href="tg://user?id=${message.from.id}">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>`, {
				parse_mode: "HTML"
			});

			let ref = await User.findOne({ id: Number(message.text.split("/start ")[1]) });
			if(ref) {
				await ref.inc("balance", settings.ppr);
			}
		}

		let user = new User(schema);
		await user.save();

		return message.send(`–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ. ‚§µÔ∏è`, {
			reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}
		});
	});

	message.user = await User.findOne({ id: message.from.id });

	if(message.text === "‚õîÔ∏è –û—Ç–º–µ–Ω–∞" || message.text === "üîô –ù–∞—á–∞–ª–æ") {
		await message.user.set("menu", "");
		await message.user.set("adminmenu", "");

		return message.send(`–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.`, {
			reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}
		});
	}

	if(message.text === "/start") {
		return message.send(`–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ. ‚§µÔ∏è`, {
			reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}
		});
	}

	if(message.user && message.user.menu) {
		if(message.user.menu === "sponsor") {
			if(!message.photo) return message.send(`–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –≤–µ—Ä–Ω–æ.`, {
				reply_markup: {
					keyboard: keyboards.cancel,
					resize_keyboard: true
				}
			});

			bot.sendPhoto(482579901, message.photo[message.photo.length - 1].file_id, {
				caption: `‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤–µ—Ä–Ω–æ.\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href="tg://user?id=${message.from.id}">–ü–µ—Ä–µ–π—Ç–∏</a>`,
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data: `sponsorGive${message.from.id}` },
							{ text: "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data: `sponsorDeny${message.from.id}` }
						]
					]
				}
			});

			await message.user.set("menu", "");
			return message.send(`–°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, —Ç–æ –≤–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.`, {
				reply_markup: {
					keyboard: keyboards.menu,
					resize_keyboard: true
				}
			});
		}

		if(message.user.menu.startsWith("enterAmount")) {
			message.text = Math.floor(Number(message.text));
			if(!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞`);

			let wallet = Number(message.user.menu.split("enterAmount")[1]);

			if(message.text > message.user.balance) return message.send(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ ${message.user.balance.toFixed(2)} RUB`);
			else if(message.text <= message.user.balance) {
				let ticket = new Ticket({
					owner: message.from.id,
					wallet: wallet,
					amount: message.text
				});
	
				await message.user.dec("balance", message.text);
				await ticket.save();
	
				await message.user.set("menu", "");
				admins.map((x) => bot.sendMessage(x, "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥!!!"));

				return message.send(`–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!

‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–ª–∞—Ç—ã: 48 —á–∞—Å–æ–≤.
üìå P.S - –ï—Å–ª–∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ —Ç–∏–ø—É ¬´–≥–¥–µ –≤—ã–ø–ª–∞—Ç–∞¬ª, ¬´–∫–æ–≥–¥–∞ –≤—ã–ø–ª–∞—Ç–∞¬ª, —Ç–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –æ–±–Ω—É–ª—ë–Ω!`, {
					reply_markup: {
						keyboard: keyboards.main,
						resize_keyboard: true
					}
				});
			}
		}

		if(message.user.menu === "qiwi") {
			message.text = Math.floor(Number(message.text));
			if(message.text < 70000000000) return message.send(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ QIWI!`);

			await message.user.set("menu", "enterAmount" + message.text);
			return message.send(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥.`);
		}

		if(message.user.menu === "enterCountChannel") {
			message.text = Math.floor(Number(message.text));
			if(!message.text) return message.send(`–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.`);

			if(message.text < 10) return message.send(`–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑: 10 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤`);
			let cost = message.text * 0.45;

			if(cost > message.user.balance) return message.send(messages.pr.sub_err_nomoney);
			else if(cost <= message.user.balance) {
				await message.user.dec("balance", cost);
				await message.user.set("menu", "");

				let channel = new Channel({
					owner: message.from.id,
					username: message.user.prfUser,
					completed: [],
					count: message.text
				});

				await channel.save();
				return message.send(messages.pr.sub_success, {
					reply_markup: {
						keyboard: keyboards.main,
						resize_keyboard: true
					}
				});
			}
		}

		if(message.user.menu === "enterCountViews") {
			message.text = Math.floor(Number(message.text));
			if(!message.text) return message.send(`–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.`);

			if(message.text < 10) return message.send(`–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑: 10 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤`);
			let cost = message.text * 0.040;

			if(cost > message.user.balance) return message.send(messages.pr.view_err_nomoney);
			else if(cost <= message.user.balance) {
				await message.user.dec("balance", cost);
				await message.user.set("menu", "");

				let post = new Post({
					owner: message.from.id,
					id: message.user.prp.id,
					post_id: message.user.prp.post_id,
					completed: [],
					count: message.text
				});

				await post.save();
				return message.send(messages.pr.view_success, {
					reply_markup: {
						keyboard: keyboards.main,
						resize_keyboard: true
					}
				});
			}
		}

		if(message.user.menu === "forwardpost") {
			if(!message.forward_from_chat) return message.send(`–ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞!`);
			if(!message.forward_from_chat.username) return message.send(messages.pr.sub_err_private);

			await message.send(messages.pr.view_confirm);
			message.forward_from_chat.post_id = message.message_id;

			await message.user.set("prp", message.forward_from_chat);
			await message.user.set("menu", "enterCountViews");
		}

		if(message.user.menu === "forwardsub") {
			if(!message.forward_from_chat) return message.send(`–ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞!`);
			if(!message.forward_from_chat.username) return message.send(`–û—à–∏–±–∫–∞! –ö–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º (–∏–º–µ—Ç—å Username)`);

			bot.getChatMember(`@${message.forward_from_chat.username}`, message.user.id).then(async (res) => {
				await message.send(messages.pr.sub_confirm);

				await message.user.set("menu", "enterCountChannel");
				await message.user.set("prfUser", message.forward_from_chat.username);
			}).catch((err) => {
				if(err.response.body.description === "Bad Request: CHAT_ADMIN_REQUIRED") return message.send(messages.pr.sub_err_noadmin);
				return message.send("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.");
			});
		}
	}

	if(message.text === "üíµ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å") {
		return message.send(messages.earn_select + "\n\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" + adversite, {
			parse_mode: "HTML",
			reply_markup: {
				keyboard: keyboards.earn,
				resize_keyboard: true
			}
		});
	}

	if(message.text === "‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è") {
		let channels		=		await Channel.find();
			channels		=		channels.filter((x) => !x.completed.find((x) => x.id === message.from.id));

		if(!channels[0]) return message.send(messages.sub_no);

		let channel = channels[Math.floor(Math.random() * channels.length)];
		return message.send(messages.sub_request, {
			parse_mode: "HTML",
			reply_markup: {
				inline_keyboard: [
					[{ text: `‚ûï –ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é`, url: `https://t.me/${channel.username}` }],
					[{ text: `‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É`, callback_data: `subcheck-${channel.username}` }],
					[{ text: "‚úñÔ∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data: `skipChannel-${channel.username}` }]
				]
			}
		});
	}

	if(message.text === "üëÅ‚Äçüó® –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å") {
		let posts = await Post.find();
			posts = posts.filter((x) => x.completed.indexOf(message.from.id) === -1);

		if(!posts[0]) return message.send(messages.view_no);
			posts = [ posts[0] ];

		for (let i = 0; i < posts.length; i++) {
			setTimeout(async () => {
				message.send(messages.view_request, {
					reply_markup: {
						keyboard: [[]]
					}
				});

				bot.forwardMessage(message.chat.id, posts[i].owner, posts[i].post_id);
				
				setTimeout(async () => {
					message.send(messages.view_end, {
						keyboard: keyboards.main,
						resize_keyboard: true
					});

					posts[i].completed.push(message.from.id);
					await posts[i].save();

					await message.user.inc("balance", settings.ppv);
				}, 2500);
			}, i * 3000);
		}
	}

	if(message.text === "üéØ –†–∞—Å–∫—Ä—É—Ç–∏—Ç—å") {
		return message.send(`<b>–†–∞—Å–∫—Ä—É—Ç–∏—Ç—å üóû</b>

–ù—É–∂–Ω–∞ –∂–∏–≤–∞—è üë• –∞—É–¥–∏—Ç–æ—Ä–∏—è –≤ –≤–∞—à –∫–∞–Ω–∞–ª? –¢–æ–≥–¥–∞ –ø–æ–∫—É–ø–∞–π—Ç–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø–æ —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π —Ü–µ–Ω–µ. –¢–∞–∫–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –Ω–∞ –ø–æ—Å—Ç, –∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É`, {
			parse_mode: "HTML",
			reply_markup: {
				keyboard: keyboards.pr,
				resize_keyboard: true
			}
		});
	}

	if(message.text === "‚ûï –ü–æ–¥–ø–∏—Å—á–∏–∫–∏") {
		await message.user.set("menu", "forwardsub");
		return message.send(messages.pr.sub, {
			parse_mode: "HTML",
			reply_markup: {
				keyboard: keyboards.cancel,
				resize_keyboard: true
			}
		});
	}

	if(message.text === "üëÅ‚Äçüó® –ü—Ä–æ—Å–º–æ—Ç—Ä—ã") {
		await message.user.set("menu", "forwardpost");
		return message.send(messages.pr.view, {
			parse_mode: "HTML",
			reply_markup: {
				keyboard: keyboards.cancel,
				resize_keyboard: true
			}
		});
	}

	if(message.text === "üìß –†–∞—Å—Å—ã–ª–∫–∞") {
		let users		=		await User.countDocuments();
		let cost		=		users * 0.01;

		return message.send(`üí´ –í–∞–º –Ω—É–∂–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ –æ—Ç –∫–æ—Ç–æ—Ä–æ–π –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–¥–∞—á–∞? –¢–æ–≥–¥–∞ –∑–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É ‚úâÔ∏è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞—à–µ–≥–æ ü§ñ –±–æ—Ç–∞. 

25%  (${Math.floor(users * 0.25)}) ‚Äî <b>${( cost * 0.25 ).toFixed(2)}</b>‚ÇΩ
50%  (${Math.floor(users * 0.50)}) ‚Äî <b>${( cost * 0.50 ).toFixed(2)}</b>‚ÇΩ
75%  (${Math.floor(users * 0.75)}) ‚Äî <b>${( cost * 0.75 ).toFixed(2)}</b>‚ÇΩ
100% (${Math.floor(users)}) ‚Äî <b>${( cost ).toFixed(2)}</b>‚ÇΩ

üì≤ –ó–∞–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É: @Rosa_Admiralov`, {
			parse_mode: "HTML"
		});
	}

	if(message.text === "üîñ –ú–æ–∏ –∑–∞–∫–∞–∑—ã") {
		let channels	=		await Channel.find({ owner: message.from.id });
		if(!channels[0]) return message.send(`–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤! ‚ùå`);

		let text		=		``;

		channels.map((x) => {
			text		+=		`üì¢ –ö–∞–Ω–∞–ª: @${x.username}
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${x.completed.length}/${x.count}\n\n`;
		});

		return message.send(`–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:

${text}`);
	}

	if(message.text === "üí≥ –ë–∞–ª–∞–Ω—Å") {
		return message.send(`üí≥ –ë–∞–ª–∞–Ω—Å
üíµ –í–∞—à –±–∞–ª–∞–Ω—Å: ${message.user.balance.toFixed(2)}‚ÇΩ

üî∫ –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞: ${message.user.verify ? `‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω` : `‚ùå –ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω`}

–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ –ª—é–±—É—é —Å—É–º–º—É (–º–æ–∂–Ω–æ –¥–∞–∂–µ 1 —Ä—É–±–ª—å)`, {
			reply_markup: {
				keyboard: keyboards.balance,
				resize_keyboard: true
			}
		});
	}

	if(message.text === "üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å") {
		return message.send(`üëõ –ö–æ—à–µ–ª—ë–∫ QIWI: <code>+998977438393</code>
üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É: <code>newprofit${message.from.id}</code>

–î–µ–Ω—å–≥–∏ –±—É–¥—É—Ç –≤—ã–¥–∞–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–∏ –º–∏–Ω—É—Ç—ã.`, {
			parse_mode: "HTML",
			reply_markup: {
				keyboard: keyboards.balance,
				resize_keyboard: true
			}
		});
	}

	if(message.text === "üì§ –í—ã–≤–µ—Å—Ç–∏") {
		if(message.user.balance < settings.min_withdraw) return message.send(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: ${settings.min_withdraw}‚ÇΩ`, {
			reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}
		});

		let ticket = await Ticket.findOne({ owner: message.from.id });
		if(ticket) return message.send(`–î–æ–∂–¥–∏—Ç–µ—Å—å –ø—Ä–æ—à–ª–æ–π –≤—ã–ø–ª–∞—Ç—ã.`);

		if(!message.user.verify) {
			return message.send(`–û—à–∏–±–∫–∞! –í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.
–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω—É–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ –ª—é–±—É—é —Å—É–º–º—É (–¥–∞–∂–µ 1 —Ä—É–±–ª—å)`, {
				reply_markup: {
					keyboard: [["üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å"], ["üîô –ù–∞—á–∞–ª–æ"]],
					resize_keyboard: true
				}
			});
		}

		message.send(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ QIWI.`, {
			reply_markup: {
				keyboard: keyboards.cancel,
				resize_keyboard: true
			}
		});

		await message.user.set("menu", "qiwi");
	}

	if(message.text === "üîù –ü–∞—Ä—Ç–Ω—ë—Ä–∞–º") {
		let lvl1		=		await User.find({ ref: message.from.id });
		let lvl2		=		[];

		for (let i = 0; i < lvl1.length; i++) {
			let second		=		await User.find({ ref: lvl1[i].id });
			for (let x = 0; x < second.length; x++) {
				lvl2.push(second[x]);
			}
		}

		return message.send(`–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π, –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ —Å—á–µ—Ç, —Ä–∞–∑–º–µ—Å—Ç–∏—Ç–µ —Å—Å—ã–ª–∫—É –≤ –≤–∞—à–µ–º –∫–∞–Ω–∞–ª–µ –∏–ª–∏ —á–∞—Ç–µ.
		
‚≠êÔ∏è –ó–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞ –ø–æ —Å—Å—ã–ª–∫–µ: <b>${settings.ppr}‚ÇΩ</b>

1Ô∏è‚É£ —É—Ä–æ–≤–µ–Ω—å ‚Äî <b>${lvl1.length}</b>
2Ô∏è‚É£ —É—Ä–æ–≤–µ–Ω—å ‚Äî <b>${lvl2.length}</b>

1Ô∏è‚É£ —É—Ä–æ–≤–µ–Ω—å ‚Äî <b>20%</b> –¥–æ—Ö–æ–¥–∞
2Ô∏è‚É£ —É—Ä–æ–≤–µ–Ω—å ‚Äî <b>10%</b> –¥–æ—Ö–æ–¥–∞

üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: https://t.me/NewProfitBot?start=${message.from.id}`, {
			parse_mode: "HTML"
		});
	}

	if(message.text === "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞") {
		let counters = {
			users: await User.countDocuments(),
			users_today: await User.find({ regDate: `${new Date().getDate()}.${new Date().getMonth() + 1}.${new Date().getFullYear()}` }),
			channels: await Channel.countDocuments(),
			posts: await Post.countDocuments()
		}

		counters.users_today		=		counters.users_today.length;

		return message.send(`<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üï¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–æ: <b>${counters.users}</b>
üï¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è: <b>${counters.users_today}</b>
üì¢ –ö–∞–Ω–∞–ª–æ–≤ –Ω–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏: <b>${counters.channels}</b>
üìÇ –ü–æ—Å—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏: <b>${counters.posts}</b>`, {
			parse_mode: "HTML"
		});
	}

	if(message.text === "üí∞ –ë–æ–ª—å—à–µ –¥–µ–Ω–µ–≥") {
		return message.send(moreMoney, {
			parse_mode: "HTML"
		});
	}

	if(message.text === "üì§ –í—ã–ø–ª–∞—Ç—ã" || message.text === "üìß –ß–∞—Ç") {
		return message.send(`–ß–∞—Ç: https://t.me/joinchat/JzaGCEVg1_y7uSDbgzgtgw
–ö–∞–Ω–∞–ª —Å –≤—ã–ø–ª–∞—Ç–∞–º–∏:  https://t.me/joinchat/AAAAAFen80IEazIXhplkzQ`);
	}

	if(/^(?:~)\s([^]+)/i.test(message.text)) {
		if(message.from.id !== 482579901) return;

		let result = eval(message.text.match(/^(?:~)\s([^]+)/i)[1]);
		try {
			if(typeof(result) === "string")
			{
				return message.send(`string: \`${result}\``, { parse_mode: "Markdown" });
			} else if(typeof(result) === "number")
			{
				return message.send(`number: \`${result}\``, { parse_mode: "Markdown" });
			} else {
				return message.send(`${typeof(result)}: \`${JSON.stringify(result, null, '\t\t')}\``, { parse_mode: "Markdown" });
			}
		} catch (e) {
			console.error(e);
			return message.send(`–æ—à–∏–±–∫–∞:
\`${e.toString()}\``, { parse_mode: "Markdown" });
		}
	}

	if(message.text === "‚≠êÔ∏è –°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è") {
		let completed = await Youtube.findOne({ id: message.from.id });
		if(completed) return message.send(`–ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π.`);

		await message.user.set("menu", "sponsor");
		return message.send(`üí∏ <b>–ó–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è</b>: <i>2‚ÇΩ</i>
üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ</b>: https://youtube.com/watch?v=Icmhg5F3_lY

1Ô∏è‚É£ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é (1:17)</b>
2Ô∏è‚É£ <b>–ü–æ—Å—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫</b>
3Ô∏è‚É£ <b>–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª</b>
4Ô∏è‚É£ <b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–ª–æ–∫–æ–ª—å—á–∏–∫</b>

‚ÑπÔ∏è –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º.`, {
			parse_mode: "HTML",
			reply_markup: {
				keyboard: keyboards.cancel,
				resize_keyboard: true
			}
		});
	}

	if(admins.indexOf(message.from.id) !== -1) {
		if(message.user.menu === "enterVerify") {
			message.text		=		Math.floor(Number(message.text));
			if(!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏.`);

			let user			=		await User.findOne({ id: message.text });
			if(!user) return message.send(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.`);

			if(user.verify) {
				await user.set("verify", false);
				await message.user.set("menu", "");

				return message.send(`–í—ã —É–¥–∞–ª–∏–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.`, {
					reply_markup: {
						keyboard: keyboards.admin,
						resize_keyboard: true
					}
				});
			} else {
				await user.set("verify", true);
				await message.user.set("menu", "");

				return message.send(`–í—ã –≤—ã–¥–∞–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.`, {
					reply_markup: {
						keyboard: keyboards.admin,
						resize_keyboard: true
					}
				});
			}
		}
	
		if(message.user.menu.startsWith("setBalance")) {
			message.text		=		Number(message.text);
			if(!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å.`);

			let user		=		await User.findOne({ id: Number(message.user.menu.split("setBalance")[1]) });
			if(!user) return;

			await user.set("balance", message.text);
			await message.user.set("menu", "");

			return message.send(`–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω.`, {
				reply_markup: {
					keyboard: keyboards.admin,
					resize_keyboard: true
				}
			});
		}

		if(message.user.menu === "enterIdBalance") {
			message.text		=		Math.floor(Number(message.text));
			if(!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏.`);

			let user		=		await User.findOne({ id: message.text });
			if(!user) return message.send(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.`);

			await message.user.set("menu", "setBalance" + message.text);
			return message.send(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å.\n–ë–∞–ª–∞–Ω—Å —Å–µ–π—á–∞—Å: ${user.balance} RUB`);
		}

		if(message.user.menu.startsWith("auditory")) {
			let users		=		await User.find();
			let total		=		users.length * Number(message.user.menu.split("auditory")[1]);

			for (let i = 0; i < total; i++) {
				if(message.photo) {
					let file_id = message.photo[message.photo.length - 1].file_id;
					let params = {
						caption: message.caption,
						parse_mode: "HTML",
						disable_web_page_preview: true
					}

					if(message.caption.match(/(?:–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i)) {
						let [ msgText, label, url ] = message.caption.match(/(?:–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i);
						params.reply_markup = {
							inline_keyboard: [
								[{ text: label, url: url }]
							]
						}

						params.caption = params.caption.replace(/(–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i, "");
					}

					bot.sendPhoto(users[i].id, file_id, params);
				}

				if(!message.photo) {
					let params = {
						parse_mode: "HTML",
						disable_web_page_preview: true
					}

					if(message.text.match(/(?:–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i)) {
						let [ msgText, label, url ] = message.text.match(/(?:–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i);
						params.reply_markup = {
							inline_keyboard: [
								[{ text: label, url: url }]
							]
						}
					}

					bot.sendMessage(users[i].id, message.text.replace(/(–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i, ""), params);
				}
			}

			await message.user.set("menu", "");
			await message.send("–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", {
				reply_markup: {
					keyboard: keyboards.admin,
					resize_keyboard: true
				}
			});
		}

		if(message.user.menu === "selectAuditory") {
			await message.user.set("menu", "auditory" + Number(message.text));
			return message.send(`–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.
			
–ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.`, {
				reply_markup: {
					keyboard: keyboards.cancel,
					resize_keyboard: true
				}
			});
		}

		if(message.user.menu === "enterId") {
			message.text = Number(message.text);
			if(!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`);

			let user		=		await User.findOne({ id: message.text });
			if(!user) return message.send(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∞–π–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.`);

			let refs		=		await User.find({ ref: message.text });
			message.send(`<a href="tg://user?id=${message.text}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>:
			
–ë–∞–ª–∞–Ω—Å: ${user.balance} RUB
–ü—Ä–∏–≥–ª–∞—Å–∏–ª —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${refs.length}`, {
				parse_mode: "HTML",
				reply_markup: {
					keyboard: keyboards.admin,
					resize_keyboard: true
				}
			});

			let text		=		``;
			refs.slice(0, 25).map((x, i) => {
				text		+=		`<a href="tg://user?id=${x.id}">–†–µ—Ñ–µ—Ä–∞–ª ‚Ññ${i}</a>\n`;
			});

			message.user.set("menu", "");
			return message.send(`–ï–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n\n${text}`, {
				parse_mode: "HTML"
			});
		}

		if(message.user.menu === "moreMoney") {
			require("fs").writeFileSync("./moreMoney.json", JSON.stringify(message.text));
			moreMoney = message.text;

			await message.user.set("menu", "");
			return message.send(`–£—Å–ø–µ—à–Ω–æ!`, {
				reply_markup: {
					keyboard: keyboards.admin,
					resize_keyboard: true
				}
			});
		}

		if(message.text === "‚úîÔ∏è –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è") {
			await message.user.set("menu", "enterVerify");
			return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`, {
				reply_markup: {
					keyboard: keyboards.cancel,
					resize_keyboard: true
				}
			});
		}

		if(message.user.menu === "ban") {
			message.text		=		Math.floor(Number(message.text));
			if(!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏.`);

			let ban			=		await Ban.findOne({ id: message.text });
			if(ban) {
				await ban.remove();
				await message.user.set("menu", "");

				return message.send(`–ë–∞–Ω —Å–Ω—è—Ç.`);
			} else {
				let _ban = new Ban({
					id: message.text
				});

				await _ban.save();
				await message.user.set("menu", "");

				return message.send(`–ë–∞–Ω –≤—ã–¥–∞–Ω.`);
			}
		}

		if(message.text === "‚õîÔ∏è –ë–∞–Ω") {
			await message.user.set("menu", "ban");
			return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`, {
				reply_markup: {
					keyboard: keyboards.cancel,
					resize_keyboard: true
				}
			});
		}

		if(message.text === "üí∞ –ëo–ª—å—à–µ –¥–µ–Ω–µ–≥") {
			await message.user.set("menu", "moreMoney");
			return message.send(`–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç üí∞ –ë–æ–ª—å—à–µ –¥–µ–Ω–µ–≥`, {
				reply_markup: {
					keyboard: keyboards.cancel,
					resize_keyboard: true
				}
			});
		}

		if(message.text === "üîì –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å") {
			await message.user.set("menu", "enterIdBalance");
			return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`, {
				reply_markup: {
					keyboard: keyboards.cancel,
					resize_keyboard: true
				}
			});
		}

		if(message.text === "üìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è") {
			await message.user.set("menu", "enterId");
			return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`, {
				reply_markup: {
					keyboard: keyboards.cancel,
					resize_keyboard: true
				}
			});
		}

		if(message.text === "üìÆ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥") {
			let tickets = await Ticket.find();
			await message.send(`–ó–∞—è–≤–∫–∏:`);

			tickets.map((x) => {
				message.send(`<a href="tg://user?id=${x.owner}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>

–ö–æ—à–µ–ª—ë–∫: ${String(x.wallet)}
–°—É–º–º–∞: ${x.amount} RUB`, {
					parse_mode: "HTML",
					reply_markup: {
						inline_keyboard: [
							[{ text: "üì§ –í—ã–ø–ª–∞—Ç–∏—Ç—å", callback_data: `withdraw${x.owner}` }],
							[{ text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å", callback_data: `declineback${x.owner}` }],
							[{ text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data: `decline${x.owner}` }]
						]
					}
				});
			});
		}

		if(message.text === "üì¨ –†–∞—Å—Å—ã–ª–∫–∞") {
			await message.user.set("menu", "selectAuditory");
			return message.send(`–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é.

0.25	‚Äî	25%
0.50	‚Äî	50%
0.75	‚Äî	75%
1		‚Äî	100%`, {
				reply_markup: {
					keyboard: [["0.25", "0.50"], ["0.75", "1"], ["‚õîÔ∏è –û—Ç–º–µ–Ω–∞"]],
					resize_keyboard: true
				}
			});
		}

		if(message.text === "/admin") return message.send(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.`, {
			reply_markup: {
				keyboard: keyboards.admin,
				resize_keyboard: true
			}
		});
	}
});

bot.on("callback_query", async (query) => {
	const { message } = query;
	message.user = await User.findOne({ id: message.chat.id });

	let ban = await Ban.findOne({ id: message.user.id });
	if(ban) return bot.answerCallbackQuery(query.id, "–ó–∞–±–∞–Ω–µ–Ω!!!");

	if(query.data.startsWith("subcheck-")) {
		let username = query.data.split("subcheck-")[1];
		let channel = await Channel.findOne({ username: username });

		if(!channel) return;
		if(channel.completed.find((x) => x.id === message.user.id)) return;
		
		bot.getChatMember(`@${channel.username}`, message.user.id).then(async (res) => {
			if(res.status === "left") return bot.answerCallbackQuery(query.id, "–í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!");
			bot.editMessageText(messages.sub_end, {
				chat_id: message.chat.id,
				message_id: message.message_id
			});

			await message.user.inc("balance", settings.pps);

			channel.completed.push({
				id: message.user.id,
				time: Date.now(),
				unfollow: false
			});

			await channel.save();

			if(channel.completed.length >= channel.count) {
				await bot.sendMessage(channel.owner, `‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ @${channel.username} –∑–∞–≤–µ—Ä—à—ë–Ω!`);
				await channel.remove();
			}

			let ref2st		=		await User.findOne({ id: message.user.ref });
			if(!ref2st) return;

			await ref2st.inc("balance", settings.pps * settings.ref1st);

			let ref1st		=		await User.findOne({ id: ref2st.ref });
			if(!ref1st) return;

			await ref1st.inc("balance", settings.pps * settings.ref2st);
		}).catch(async (err) => {
			if(err.response.body.description === "Bad Request: CHAT_ADMIN_REQUIRED") {
				bot.editMessageText("–ó–∞–∫–∞–∑—á–∏–∫ —É–±—Ä–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª.", {
					chat_id: message.chat.id,
					message_id: message.message_id
				});

				bot.sendMessage(channel.owner, "–í—ã —É–±—Ä–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ —É –±–æ—Ç–∞. –ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω.");
				await channel.remove();
			}
		});
	}

	if(query.data.startsWith("skipChannel")) {
		let username	=	query.data.split("skipChannel-");
		let channel		=	await Channel.findOne({ username: username });

		if(!channel) return;
		channel.completed.push({ id: message.user.id, time: Date.now(), unfollow: true });

		await channel.save();
		return bot.editMessageText(`–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª.`, {
			chat_id: message.chat.id,
			message_id: message.message_id
		});
	}

	if(admins.indexOf(message.user.id) !== -1) {
		if(query.data.startsWith("sponsorGive")) {
			let id			=		Number(query.data.split("sponsorGive")[1]);
			let user		=		await User.findOne({ id: id });

			await user.inc("balance", 2);
			bot.sendMessage(id, `‚úÖ –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏–ª–∏ 2 —Ä—É–±–ª—è –Ω–∞ –±–∞–ª–∞–Ω—Å.`);

			let completed	=		new Youtube({ id: id });
			await completed.save();

			return bot.answerCallbackQuery(query.id, "–ì–æ—Ç–æ–≤–æ.");
		}

		if(query.data.startsWith("sponsorDeny")) {
			let id			=		Number(query.data.split("sponsorDeny")[1]);
			bot.sendMessage(id, `‚ùå –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ!`);

			return bot.answerCallbackQuery(query.id, "–ì–æ—Ç–æ–≤–æ.");
		}

		if(query.data.startsWith("withdraw")) {
			let id			=		Number(query.data.split("withdraw")[1]);
			let ticket		=		await Ticket.findOne({ owner: id });

			if(!ticket) return bot.answerCallbackQuery(query.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");

			await wallet.toWallet({
				account: "+" + ticket.wallet,
				amount: ticket.amount,
				comment: "@NewProfitBot"
			}, (err, success) => {});

			bot.sendMessage(ticket.owner, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.");
			bot.sendMessage("@newprofitpay", `ü§ñ <b>–ë—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –≤—ã–ø–ª–∞—Ç–∞!</b>
üí∞ <b>–°—É–º–º–∞: ${Math.floor(ticket.amount)}‚ÇΩ</b>
			
‚úÖ <b>–•–æ—á–µ—à—å —Ç–æ–∂–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å?</b>
‚≠êÔ∏è <b>–ó–∞—Ö–æ–¥–∏ –∫ –Ω–∞–º! –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞—Ö, –ø—Ä–æ—Å–º–æ—Ç—Ä–∞—Ö, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è—Ö.</b>`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [[
						{ text: "üí∞ –ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞", url: `https://t.me/NewProfitBot` }
					]]
				}
			});


			await ticket.remove();
			bot.editMesssageText("–î–µ–Ω—å–≥–∏ –≤—ã–ø–ª–∞—á–µ–Ω—ã.", {
				chat_id: message.chat.id,
				message_id: message.message_id
			});

			return;
		}

		if(query.data.startsWith("declineback")) {
			let id			=		Number(query.data.split("declineback")[1]);
			let ticket		=		await Ticket.findOne({ owner: id });

			if(!ticket) return bot.answerCallbackQuery(query.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");

			await bot.sendMessage(ticket.owner, "–í–∞–º –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –≤—ã–ø–ª–∞—Ç—É –∏ –≤–µ—Ä–Ω—É–ª–∏ –¥–µ–Ω—å–≥–∏.");
			await User.findOne({ id: id }).then(async (user) => await user.inc("balance", ticket.amount));

			await ticket.remove();
			await bot.answerCallbackQuery(query.id, "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏ –≤ –≤—ã–ø–ª–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏ –≤–µ—Ä–Ω—É–ª–∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å.");
		}

		if(query.data.startsWith("decline")) {
			let id			=		Number(query.data.split("decline")[1]);
			let ticket		=		await Ticket.findOne({ owner: id });

			if(!ticket) return bot.answerCallbackQuery(query.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");

			await ticket.remove();
			await bot.answerCallbackQuery(query.id, "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏ –≤ –≤—ã–ø–ª–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤.");
		}
	}
});

User.prototype.inc		=		function(field, value = 1) {
	this[field] 		+=		value;
	return this.save();
}

User.prototype.dec 		= 		function(field, value = 1) {
	this[field] 		-= 		value;
	return this.save();
}

User.prototype.set 		= 		function(field, value) {
	this[field] 		=	 	value;
	return this.save();
}

setInterval(async () => {
	await writeStrikes();
}, 600000);

async function writeStrikes() {
	let channels = await Channel.find();
	await channels.map(async (x) => {
		x.completed.filter((a) => Date.now() < 604800000 + a.time && !a.unfollow).map(async (a) => {
			let unfollow = await Unfollow.findOne({ id: a.id, username: x.username });
			if(unfollow) return;

			let res = await bot.getChatMember("@" + x.username, a.id).catch((err) => console.error(err.response.body));

			if(res.status !== "left") return;
			let user = await User.findOne({ id: a.id });

			await user.dec("balance", 1);
			bot.sendMessage(a.id, `‚ö†Ô∏è –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–∞–Ω–∞–ª–∞ @${x.username} –∏ –ø–æ–ª—É—á–∏–ª–∏ —à—Ç—Ä–∞—Ñ (1 —Ä—É–±–ª—å)`);

			let _unfollow = new Unfollow({ id: a.id, username: x.username });
			await _unfollow.save();
		});
	});

	return true;
}",
	{ polling: true }
);

setInterval(async () => {
	wallet.getOperationHistory({
		rows: 3,
		operation: "IN"
	}, async (err, res) => {
		res.data.map(async (operation) => {
			if(transactions.indexOf(operation.txnId) !== -1) return;

			if(!operation.comment) return;
			if(!operation.comment.startsWith("newprofit")) return;

			let user = await User.findOne({ id: Number(operation.comment.split("newprofit")[1]) });
			if(!user) return;

			await user.inc("balance", operation.sum.amount);
			await user.set("verify", true);
			
			bot.sendMessage(user.id, `–í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –Ω–∞ ${operation.sum.amount}—Ä`);

			transactions.push(operation.txnId);
			require("fs").writeFileSync("./transactions.json", JSON.stringify(transactions, null, "\t"));
		});
	});
}, 30000);

const settings		=		{
	pps: 0.25,
	ppv: 0.025,
	ppr: 0.10,
	ref1st: 0.20,
	ref2st: 0.10,
	min_withdraw: 15
}

const messages		=		{
	earn_select: `<b>üíé –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å</b>

üìÉ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –¥–µ–Ω—å–≥–∏.

<b>üìÆ –í–∞–∂–Ω–æ</b>: –ó–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 7 –¥–Ω–µ–π.`,
	sub_request: `‚ûï –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞ —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ.\n\nüìå <b>–í–∞–∂–Ω–æ</b>: –ù–µ –≤—ã—Ö–æ–¥–∏—Ç–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 7 –¥–Ω–µ–π.`,
	sub_no: `–ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.`,
	sub_err: `–í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!`,
	sub_end: `–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É. –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${settings.pps}‚ÇΩ üëç`,
	view_request: `üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ—Å—Ç, –æ–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è üí∏`,
	view_end: `üí∞ –ù–∞ –í–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${settings.ppv}‚ÇΩ`,
	view_no: `–ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤.`,
	pr: {
		sub: `<b>–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:</b>
		
<b>1.</b> –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞
<b>2.</b> –ü–µ—Ä–µ—Å–ª–∞—Ç—å –ª—é–±–æ–π –ø–æ—Å—Ç –∏–∑ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º
<b>3.</b> –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑`,
		view: `<b>–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º</b>`,
		sub_confirm: `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.\n1 –ø–æ–¥–ø–∏—Å—á–∏–∫ = 0.45‚ÇΩ\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑: 10 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤`,
		sub_success: `–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.`,
		sub_err_nomoney: `–û—à–∏–±–∫–∞! –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥.`,
		sub_err_noadmin: `–û—à–∏–±–∫–∞! –í—ã –Ω–µ –≤—ã–¥–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`,
		sub_err_private: `–û—à–∏–±–∫–∞! –ö–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å <b>username</b>`,
		view_confirm: `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.\n1 –ø—Ä–æ—Å–º–æ—Ç—Ä = 0.040‚ÇΩ\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑: 10 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤`,
		view_success: `–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.`,
		view_err_nomoney: `–û—à–∏–±–∫–∞! –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥.`
	}
}

const keyboards		=		{
	main: [
		["üíµ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å", "üéØ –†–∞—Å–∫—Ä—É—Ç–∏—Ç—å"],
		["üí≥ –ë–∞–ª–∞–Ω—Å", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
		["üîù –ü–∞—Ä—Ç–Ω—ë—Ä–∞–º", "üí∞ –ë–æ–ª—å—à–µ –¥–µ–Ω–µ–≥"],
		["üìß –ß–∞—Ç", "üì§ –í—ã–ø–ª–∞—Ç—ã"]
	],
	earn: [
		["‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", "üëÅ‚Äçüó® –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å"],
		["‚õîÔ∏è –û—Ç–º–µ–Ω–∞"]
	],
	pr: [
		["‚ûï –ü–æ–¥–ø–∏—Å—á–∏–∫–∏", "üëÅ‚Äçüó® –ü—Ä–æ—Å–º–æ—Ç—Ä—ã"],
		["üìß –†–∞—Å—Å—ã–ª–∫–∞"],
		["üîñ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", "üîô –ù–∞—á–∞–ª–æ"]
	],
	balance: [
		["üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å", "üì§ –í—ã–≤–µ—Å—Ç–∏"],
		["üîô –ù–∞—á–∞–ª–æ"]
	],
	cancel: [
		["‚õîÔ∏è –û—Ç–º–µ–Ω–∞"]
	],
	admin: [
		["üì¨ –†–∞—Å—Å—ã–ª–∫–∞", "üìÆ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥"],
		["üìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "üîì –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"],
		["üí∞ –ëo–ª—å—à–µ –¥–µ–Ω–µ–≥", "‚õîÔ∏è –ë–∞–Ω"],
		["‚úîÔ∏è –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è"],
		["üîô –ù–∞—á–∞–ª–æ"]
	]
}

bot.on("message", async (message) => {
	let ban = await Ban.findOne({ id: message.from.id });
	if(ban) return;

	message.send = (text, params) => bot.sendMessage(message.chat.id, text, params);
	User.findOne({ id: message.from.id }).then(async ($user) => {
		if($user) return;

		let schema = {
			id: message.from.id,
			balance: 0,
			ref: 0,
			epr: 0,
			eps: 0,
			epv: 0,
			menu: "",
			adminmenu: "",
			prfUser: "",
			prp: {},
			regDate: `${new Date().getDate()}.${new Date().getMonth() + 1}.${new Date().getFullYear()}`,
			verify: false
		}

		if(Number(message.text.split("/start ")[1])) {
			schema.ref		=		Number(message.text.split("/start ")[1]);
			bot.sendMessage(Number(message.text.split("/start ")[1]), `üìö –í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>${settings.ppr}‚ÇΩ</b> –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ <a href="tg://user?id=${message.from.id}">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>`, {
				parse_mode: "HTML"
			});

			let ref = await User.findOne({ id: Number(message.text.split("/start ")[1]) });
			if(ref) {
				await ref.inc("balance", settings.ppr);
			}
		}

		let user = new User(schema);
		await user.save();

		return message.send(`–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ. ‚§µÔ∏è`, {
			reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}
		});
	});

	message.user = await User.findOne({ id: message.from.id });

	if(message.text === "‚õîÔ∏è –û—Ç–º–µ–Ω–∞" || message.text === "üîô –ù–∞—á–∞–ª–æ") {
		await message.user.set("menu", "");
		await message.user.set("adminmenu", "");

		return message.send(`–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.`, {
			reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}
		});
	}

	if(message.text === "/start") {
		return message.send(`–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ. ‚§µÔ∏è`, {
			reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}
		});
	}

	if(message.user && message.user.menu) {
		if(message.user.menu === "sponsor") {
			if(!message.photo) return message.send(`–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –≤–µ—Ä–Ω–æ.`, {
				reply_markup: {
					keyboard: keyboards.cancel,
					resize_keyboard: true
				}
			});

			bot.sendPhoto(482579901, message.photo[message.photo.length - 1].file_id, {
				caption: `‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤–µ—Ä–Ω–æ.\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href="tg://user?id=${message.from.id}">–ü–µ—Ä–µ–π—Ç–∏</a>`,
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data: `sponsorGive${message.from.id}` },
							{ text: "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data: `sponsorDeny${message.from.id}` }
						]
					]
				}
			});

			await message.user.set("menu", "");
			return message.send(`–°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, —Ç–æ –≤–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.`, {
				reply_markup: {
					keyboard: keyboards.menu,
					resize_keyboard: true
				}
			});
		}

		if(message.user.menu.startsWith("enterAmount")) {
			message.text = Math.floor(Number(message.text));
			if(!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞`);

			let wallet = Number(message.user.menu.split("enterAmount")[1]);

			if(message.text > message.user.balance) return message.send(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ ${message.user.balance.toFixed(2)} RUB`);
			else if(message.text <= message.user.balance) {
				let ticket = new Ticket({
					owner: message.from.id,
					wallet: wallet,
					amount: message.text
				});
	
				await message.user.dec("balance", message.text);
				await ticket.save();
	
				await message.user.set("menu", "");
				admins.map((x) => bot.sendMessage(x, "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥!!!"));

				return message.send(`–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!

‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–ª–∞—Ç—ã: 48 —á–∞—Å–æ–≤.
üìå P.S - –ï—Å–ª–∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ —Ç–∏–ø—É ¬´–≥–¥–µ –≤—ã–ø–ª–∞—Ç–∞¬ª, ¬´–∫–æ–≥–¥–∞ –≤—ã–ø–ª–∞—Ç–∞¬ª, —Ç–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –æ–±–Ω—É–ª—ë–Ω!`, {
					reply_markup: {
						keyboard: keyboards.main,
						resize_keyboard: true
					}
				});
			}
		}

		if(message.user.menu === "qiwi") {
			message.text = Math.floor(Number(message.text));
			if(message.text < 70000000000) return message.send(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ QIWI!`);

			await message.user.set("menu", "enterAmount" + message.text);
			return message.send(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥.`);
		}

		if(message.user.menu === "enterCountChannel") {
			message.text = Math.floor(Number(message.text));
			if(!message.text) return message.send(`–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.`);

			if(message.text < 10) return message.send(`–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑: 10 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤`);
			let cost = message.text * 0.45;

			if(cost > message.user.balance) return message.send(messages.pr.sub_err_nomoney);
			else if(cost <= message.user.balance) {
				await message.user.dec("balance", cost);
				await message.user.set("menu", "");

				let channel = new Channel({
					owner: message.from.id,
					username: message.user.prfUser,
					completed: [],
					count: message.text
				});

				await channel.save();
				return message.send(messages.pr.sub_success, {
					reply_markup: {
						keyboard: keyboards.main,
						resize_keyboard: true
					}
				});
			}
		}

		if(message.user.menu === "enterCountViews") {
			message.text = Math.floor(Number(message.text));
			if(!message.text) return message.send(`–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.`);

			if(message.text < 10) return message.send(`–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑: 10 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤`);
			let cost = message.text * 0.040;

			if(cost > message.user.balance) return message.send(messages.pr.view_err_nomoney);
			else if(cost <= message.user.balance) {
				await message.user.dec("balance", cost);
				await message.user.set("menu", "");

				let post = new Post({
					owner: message.from.id,
					id: message.user.prp.id,
					post_id: message.user.prp.post_id,
					completed: [],
					count: message.text
				});

				await post.save();
				return message.send(messages.pr.view_success, {
					reply_markup: {
						keyboard: keyboards.main,
						resize_keyboard: true
					}
				});
			}
		}

		if(message.user.menu === "forwardpost") {
			if(!message.forward_from_chat) return message.send(`–ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞!`);
			if(!message.forward_from_chat.username) return message.send(messages.pr.sub_err_private);

			await message.send(messages.pr.view_confirm);
			message.forward_from_chat.post_id = message.message_id;

			await message.user.set("prp", message.forward_from_chat);
			await message.user.set("menu", "enterCountViews");
		}

		if(message.user.menu === "forwardsub") {
			if(!message.forward_from_chat) return message.send(`–ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞!`);
			if(!message.forward_from_chat.username) return message.send(`–û—à–∏–±–∫–∞! –ö–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º (–∏–º–µ—Ç—å Username)`);

			bot.getChatMember(`@${message.forward_from_chat.username}`, message.user.id).then(async (res) => {
				await message.send(messages.pr.sub_confirm);

				await message.user.set("menu", "enterCountChannel");
				await message.user.set("prfUser", message.forward_from_chat.username);
			}).catch((err) => {
				if(err.response.body.description === "Bad Request: CHAT_ADMIN_REQUIRED") return message.send(messages.pr.sub_err_noadmin);
				return message.send("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.");
			});
		}
	}

	if(message.text === "üíµ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å") {
		return message.send(messages.earn_select + "\n\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" + adversite, {
			parse_mode: "HTML",
			reply_markup: {
				keyboard: keyboards.earn,
				resize_keyboard: true
			}
		});
	}

	if(message.text === "‚ûï –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è") {
		let channels		=		await Channel.find();
			channels		=		channels.filter((x) => !x.completed.find((x) => x.id === message.from.id));

		if(!channels[0]) return message.send(messages.sub_no);

		let channel = channels[Math.floor(Math.random() * channels.length)];
		return message.send(messages.sub_request, {
			parse_mode: "HTML",
			reply_markup: {
				inline_keyboard: [
					[{ text: `‚ûï –ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é`, url: `https://t.me/${channel.username}` }],
					[{ text: `‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É`, callback_data: `subcheck-${channel.username}` }],
					[{ text: "‚úñÔ∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data: `skipChannel-${channel.username}` }]
				]
			}
		});
	}

	if(message.text === "üëÅ‚Äçüó® –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å") {
		let posts = await Post.find();
			posts = posts.filter((x) => x.completed.indexOf(message.from.id) === -1);

		if(!posts[0]) return message.send(messages.view_no);
			posts = [ posts[0] ];

		for (let i = 0; i < posts.length; i++) {
			setTimeout(async () => {
				message.send(messages.view_request, {
					reply_markup: {
						keyboard: [[]]
					}
				});

				bot.forwardMessage(message.chat.id, posts[i].owner, posts[i].post_id);
				
				setTimeout(async () => {
					message.send(messages.view_end, {
						keyboard: keyboards.main,
						resize_keyboard: true
					});

					posts[i].completed.push(message.from.id);
					await posts[i].save();

					await message.user.inc("balance", settings.ppv);
				}, 2500);
			}, i * 3000);
		}
	}

	if(message.text === "üéØ –†–∞—Å–∫—Ä—É—Ç–∏—Ç—å") {
		return message.send(`<b>–†–∞—Å–∫—Ä—É—Ç–∏—Ç—å üóû</b>

–ù—É–∂–Ω–∞ –∂–∏–≤–∞—è üë• –∞—É–¥–∏—Ç–æ—Ä–∏—è –≤ –≤–∞—à –∫–∞–Ω–∞–ª? –¢–æ–≥–¥–∞ –ø–æ–∫—É–ø–∞–π—Ç–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø–æ —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π —Ü–µ–Ω–µ. –¢–∞–∫–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –Ω–∞ –ø–æ—Å—Ç, –∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É`, {
			parse_mode: "HTML",
			reply_markup: {
				keyboard: keyboards.pr,
				resize_keyboard: true
			}
		});
	}

	if(message.text === "‚ûï –ü–æ–¥–ø–∏—Å—á–∏–∫–∏") {
		await message.user.set("menu", "forwardsub");
		return message.send(messages.pr.sub, {
			parse_mode: "HTML",
			reply_markup: {
				keyboard: keyboards.cancel,
				resize_keyboard: true
			}
		});
	}

	if(message.text === "üëÅ‚Äçüó® –ü—Ä–æ—Å–º–æ—Ç—Ä—ã") {
		await message.user.set("menu", "forwardpost");
		return message.send(messages.pr.view, {
			parse_mode: "HTML",
			reply_markup: {
				keyboard: keyboards.cancel,
				resize_keyboard: true
			}
		});
	}

	if(message.text === "üìß –†–∞—Å—Å—ã–ª–∫–∞") {
		let users		=		await User.countDocuments();
		let cost		=		users * 0.01;

		return message.send(`üí´ –í–∞–º –Ω—É–∂–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ –æ—Ç –∫–æ—Ç–æ—Ä–æ–π –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–¥–∞—á–∞? –¢–æ–≥–¥–∞ –∑–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É ‚úâÔ∏è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞—à–µ–≥–æ ü§ñ –±–æ—Ç–∞. 

25%  (${Math.floor(users * 0.25)}) ‚Äî <b>${( cost * 0.25 ).toFixed(2)}</b>‚ÇΩ
50%  (${Math.floor(users * 0.50)}) ‚Äî <b>${( cost * 0.50 ).toFixed(2)}</b>‚ÇΩ
75%  (${Math.floor(users * 0.75)}) ‚Äî <b>${( cost * 0.75 ).toFixed(2)}</b>‚ÇΩ
100% (${Math.floor(users)}) ‚Äî <b>${( cost ).toFixed(2)}</b>‚ÇΩ

üì≤ –ó–∞–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É: @Rosa_Admiralov`, {
			parse_mode: "HTML"
		});
	}

	if(message.text === "üîñ –ú–æ–∏ –∑–∞–∫–∞–∑—ã") {
		let channels	=		await Channel.find({ owner: message.from.id });
		if(!channels[0]) return message.send(`–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤! ‚ùå`);

		let text		=		``;

		channels.map((x) => {
			text		+=		`üì¢ –ö–∞–Ω–∞–ª: @${x.username}
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${x.completed.length}/${x.count}\n\n`;
		});

		return message.send(`–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:

${text}`);
	}

	if(message.text === "üí≥ –ë–∞–ª–∞–Ω—Å") {
		return message.send(`üí≥ –ë–∞–ª–∞–Ω—Å
üíµ –í–∞—à –±–∞–ª–∞–Ω—Å: ${message.user.balance.toFixed(2)}‚ÇΩ

üî∫ –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞: ${message.user.verify ? `‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω` : `‚ùå –ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω`}

–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –≤—ã –¥–æ–ª–∂–Ω—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ –ª—é–±—É—é —Å—É–º–º—É (–º–æ–∂–Ω–æ –¥–∞–∂–µ 1 —Ä—É–±–ª—å)`, {
			reply_markup: {
				keyboard: keyboards.balance,
				resize_keyboard: true
			}
		});
	}

	if(message.text === "üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å") {
		return message.send(`üëõ –ö–æ—à–µ–ª—ë–∫ QIWI: <code>+998977438393</code>
üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É: <code>newprofit${message.from.id}</code>

–î–µ–Ω—å–≥–∏ –±—É–¥—É—Ç –≤—ã–¥–∞–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–∏ –º–∏–Ω—É—Ç—ã.`, {
			parse_mode: "HTML",
			reply_markup: {
				keyboard: keyboards.balance,
				resize_keyboard: true
			}
		});
	}

	if(message.text === "üì§ –í—ã–≤–µ—Å—Ç–∏") {
		if(message.user.balance < settings.min_withdraw) return message.send(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: ${settings.min_withdraw}‚ÇΩ`, {
			reply_markup: {
				keyboard: keyboards.main,
				resize_keyboard: true
			}
		});

		let ticket = await Ticket.findOne({ owner: message.from.id });
		if(ticket) return message.send(`–î–æ–∂–¥–∏—Ç–µ—Å—å –ø—Ä–æ—à–ª–æ–π –≤—ã–ø–ª–∞—Ç—ã.`);

		if(!message.user.verify) {
			return message.send(`–û—à–∏–±–∫–∞! –í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.
–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω—É–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ –ª—é–±—É—é —Å—É–º–º—É (–¥–∞–∂–µ 1 —Ä—É–±–ª—å)`, {
				reply_markup: {
					keyboard: [["üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å"], ["üîô –ù–∞—á–∞–ª–æ"]],
					resize_keyboard: true
				}
			});
		}

		message.send(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ QIWI.`, {
			reply_markup: {
				keyboard: keyboards.cancel,
				resize_keyboard: true
			}
		});

		await message.user.set("menu", "qiwi");
	}

	if(message.text === "üîù –ü–∞—Ä—Ç–Ω—ë—Ä–∞–º") {
		let lvl1		=		await User.find({ ref: message.from.id });
		let lvl2		=		[];

		for (let i = 0; i < lvl1.length; i++) {
			let second		=		await User.find({ ref: lvl1[i].id });
			for (let x = 0; x < second.length; x++) {
				lvl2.push(second[x]);
			}
		}

		return message.send(`–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π, –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ —Å—á–µ—Ç, —Ä–∞–∑–º–µ—Å—Ç–∏—Ç–µ —Å—Å—ã–ª–∫—É –≤ –≤–∞—à–µ–º –∫–∞–Ω–∞–ª–µ –∏–ª–∏ —á–∞—Ç–µ.
		
‚≠êÔ∏è –ó–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–≥–∞ –ø–æ —Å—Å—ã–ª–∫–µ: <b>${settings.ppr}‚ÇΩ</b>

1Ô∏è‚É£ —É—Ä–æ–≤–µ–Ω—å ‚Äî <b>${lvl1.length}</b>
2Ô∏è‚É£ —É—Ä–æ–≤–µ–Ω—å ‚Äî <b>${lvl2.length}</b>

1Ô∏è‚É£ —É—Ä–æ–≤–µ–Ω—å ‚Äî <b>20%</b> –¥–æ—Ö–æ–¥–∞
2Ô∏è‚É£ —É—Ä–æ–≤–µ–Ω—å ‚Äî <b>10%</b> –¥–æ—Ö–æ–¥–∞

üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: https://t.me/NewProfitBot?start=${message.from.id}`, {
			parse_mode: "HTML"
		});
	}

	if(message.text === "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞") {
		let counters = {
			users: await User.countDocuments(),
			users_today: await User.find({ regDate: `${new Date().getDate()}.${new Date().getMonth() + 1}.${new Date().getFullYear()}` }),
			channels: await Channel.countDocuments(),
			posts: await Post.countDocuments()
		}

		counters.users_today		=		counters.users_today.length;

		return message.send(`<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üï¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–æ: <b>${counters.users}</b>
üï¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è: <b>${counters.users_today}</b>
üì¢ –ö–∞–Ω–∞–ª–æ–≤ –Ω–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏: <b>${counters.channels}</b>
üìÇ –ü–æ—Å—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏: <b>${counters.posts}</b>`, {
			parse_mode: "HTML"
		});
	}

	if(message.text === "üí∞ –ë–æ–ª—å—à–µ –¥–µ–Ω–µ–≥") {
		return message.send(moreMoney, {
			parse_mode: "HTML"
		});
	}

	if(message.text === "üì§ –í—ã–ø–ª–∞—Ç—ã" || message.text === "üìß –ß–∞—Ç") {
		return message.send(`–ß–∞—Ç: https://t.me/joinchat/JzaGCEVg1_y7uSDbgzgtgw
–ö–∞–Ω–∞–ª —Å –≤—ã–ø–ª–∞—Ç–∞–º–∏:  https://t.me/joinchat/AAAAAFen80IEazIXhplkzQ`);
	}

	if(/^(?:~)\s([^]+)/i.test(message.text)) {
		if(message.from.id !== 482579901) return;

		let result = eval(message.text.match(/^(?:~)\s([^]+)/i)[1]);
		try {
			if(typeof(result) === "string")
			{
				return message.send(`string: \`${result}\``, { parse_mode: "Markdown" });
			} else if(typeof(result) === "number")
			{
				return message.send(`number: \`${result}\``, { parse_mode: "Markdown" });
			} else {
				return message.send(`${typeof(result)}: \`${JSON.stringify(result, null, '\t\t')}\``, { parse_mode: "Markdown" });
			}
		} catch (e) {
			console.error(e);
			return message.send(`–æ—à–∏–±–∫–∞:
\`${e.toString()}\``, { parse_mode: "Markdown" });
		}
	}

	if(message.text === "‚≠êÔ∏è –°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è") {
		let completed = await Youtube.findOne({ id: message.from.id });
		if(completed) return message.send(`–ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π.`);

		await message.user.set("menu", "sponsor");
		return message.send(`üí∏ <b>–ó–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è</b>: <i>2‚ÇΩ</i>
üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ</b>: https://youtube.com/watch?v=Icmhg5F3_lY

1Ô∏è‚É£ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é (1:17)</b>
2Ô∏è‚É£ <b>–ü–æ—Å—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫</b>
3Ô∏è‚É£ <b>–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª</b>
4Ô∏è‚É£ <b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–ª–æ–∫–æ–ª—å—á–∏–∫</b>

‚ÑπÔ∏è –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º.`, {
			parse_mode: "HTML",
			reply_markup: {
				keyboard: keyboards.cancel,
				resize_keyboard: true
			}
		});
	}

	if(admins.indexOf(message.from.id) !== -1) {
		if(message.user.menu === "enterVerify") {
			message.text		=		Math.floor(Number(message.text));
			if(!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏.`);

			let user			=		await User.findOne({ id: message.text });
			if(!user) return message.send(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.`);

			if(user.verify) {
				await user.set("verify", false);
				await message.user.set("menu", "");

				return message.send(`–í—ã —É–¥–∞–ª–∏–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.`, {
					reply_markup: {
						keyboard: keyboards.admin,
						resize_keyboard: true
					}
				});
			} else {
				await user.set("verify", true);
				await message.user.set("menu", "");

				return message.send(`–í—ã –≤—ã–¥–∞–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.`, {
					reply_markup: {
						keyboard: keyboards.admin,
						resize_keyboard: true
					}
				});
			}
		}
	
		if(message.user.menu.startsWith("setBalance")) {
			message.text		=		Number(message.text);
			if(!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å.`);

			let user		=		await User.findOne({ id: Number(message.user.menu.split("setBalance")[1]) });
			if(!user) return;

			await user.set("balance", message.text);
			await message.user.set("menu", "");

			return message.send(`–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω.`, {
				reply_markup: {
					keyboard: keyboards.admin,
					resize_keyboard: true
				}
			});
		}

		if(message.user.menu === "enterIdBalance") {
			message.text		=		Math.floor(Number(message.text));
			if(!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏.`);

			let user		=		await User.findOne({ id: message.text });
			if(!user) return message.send(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.`);

			await message.user.set("menu", "setBalance" + message.text);
			return message.send(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å.\n–ë–∞–ª–∞–Ω—Å —Å–µ–π—á–∞—Å: ${user.balance} RUB`);
		}

		if(message.user.menu.startsWith("auditory")) {
			let users		=		await User.find();
			let total		=		users.length * Number(message.user.menu.split("auditory")[1]);

			for (let i = 0; i < total; i++) {
				if(message.photo) {
					let file_id = message.photo[message.photo.length - 1].file_id;
					let params = {
						caption: message.caption,
						parse_mode: "HTML",
						disable_web_page_preview: true
					}

					if(message.caption.match(/(?:–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i)) {
						let [ msgText, label, url ] = message.caption.match(/(?:–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i);
						params.reply_markup = {
							inline_keyboard: [
								[{ text: label, url: url }]
							]
						}

						params.caption = params.caption.replace(/(–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i, "");
					}

					bot.sendPhoto(users[i].id, file_id, params);
				}

				if(!message.photo) {
					let params = {
						parse_mode: "HTML",
						disable_web_page_preview: true
					}

					if(message.text.match(/(?:–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i)) {
						let [ msgText, label, url ] = message.text.match(/(?:–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i);
						params.reply_markup = {
							inline_keyboard: [
								[{ text: label, url: url }]
							]
						}
					}

					bot.sendMessage(users[i].id, message.text.replace(/(–∫–Ω–æ–ø–∫–∞)\s(.*)\s-\s(.*)/i, ""), params);
				}
			}

			await message.user.set("menu", "");
			await message.send("–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", {
				reply_markup: {
					keyboard: keyboards.admin,
					resize_keyboard: true
				}
			});
		}

		if(message.user.menu === "selectAuditory") {
			await message.user.set("menu", "auditory" + Number(message.text));
			return message.send(`–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.
			
–ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.`, {
				reply_markup: {
					keyboard: keyboards.cancel,
					resize_keyboard: true
				}
			});
		}

		if(message.user.menu === "enterId") {
			message.text = Number(message.text);
			if(!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`);

			let user		=		await User.findOne({ id: message.text });
			if(!user) return message.send(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∞–π–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.`);

			let refs		=		await User.find({ ref: message.text });
			message.send(`<a href="tg://user?id=${message.text}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>:
			
–ë–∞–ª–∞–Ω—Å: ${user.balance} RUB
–ü—Ä–∏–≥–ª–∞—Å–∏–ª —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${refs.length}`, {
				parse_mode: "HTML",
				reply_markup: {
					keyboard: keyboards.admin,
					resize_keyboard: true
				}
			});

			let text		=		``;
			refs.slice(0, 25).map((x, i) => {
				text		+=		`<a href="tg://user?id=${x.id}">–†–µ—Ñ–µ—Ä–∞–ª ‚Ññ${i}</a>\n`;
			});

			message.user.set("menu", "");
			return message.send(`–ï–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n\n${text}`, {
				parse_mode: "HTML"
			});
		}

		if(message.user.menu === "moreMoney") {
			require("fs").writeFileSync("./moreMoney.json", JSON.stringify(message.text));
			moreMoney = message.text;

			await message.user.set("menu", "");
			return message.send(`–£—Å–ø–µ—à–Ω–æ!`, {
				reply_markup: {
					keyboard: keyboards.admin,
					resize_keyboard: true
				}
			});
		}

		if(message.text === "‚úîÔ∏è –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è") {
			await message.user.set("menu", "enterVerify");
			return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`, {
				reply_markup: {
					keyboard: keyboards.cancel,
					resize_keyboard: true
				}
			});
		}

		if(message.user.menu === "ban") {
			message.text		=		Math.floor(Number(message.text));
			if(!message.text) return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏.`);

			let ban			=		await Ban.findOne({ id: message.text });
			if(ban) {
				await ban.remove();
				await message.user.set("menu", "");

				return message.send(`–ë–∞–Ω —Å–Ω—è—Ç.`);
			} else {
				let _ban = new Ban({
					id: message.text
				});

				await _ban.save();
				await message.user.set("menu", "");

				return message.send(`–ë–∞–Ω –≤—ã–¥–∞–Ω.`);
			}
		}

		if(message.text === "‚õîÔ∏è –ë–∞–Ω") {
			await message.user.set("menu", "ban");
			return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`, {
				reply_markup: {
					keyboard: keyboards.cancel,
					resize_keyboard: true
				}
			});
		}

		if(message.text === "üí∞ –ëo–ª—å—à–µ –¥–µ–Ω–µ–≥") {
			await message.user.set("menu", "moreMoney");
			return message.send(`–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç üí∞ –ë–æ–ª—å—à–µ –¥–µ–Ω–µ–≥`, {
				reply_markup: {
					keyboard: keyboards.cancel,
					resize_keyboard: true
				}
			});
		}

		if(message.text === "üîì –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å") {
			await message.user.set("menu", "enterIdBalance");
			return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`, {
				reply_markup: {
					keyboard: keyboards.cancel,
					resize_keyboard: true
				}
			});
		}

		if(message.text === "üìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è") {
			await message.user.set("menu", "enterId");
			return message.send(`–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`, {
				reply_markup: {
					keyboard: keyboards.cancel,
					resize_keyboard: true
				}
			});
		}

		if(message.text === "üìÆ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥") {
			let tickets = await Ticket.find();
			await message.send(`–ó–∞—è–≤–∫–∏:`);

			tickets.map((x) => {
				message.send(`<a href="tg://user?id=${x.owner}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>

–ö–æ—à–µ–ª—ë–∫: ${String(x.wallet)}
–°—É–º–º–∞: ${x.amount} RUB`, {
					parse_mode: "HTML",
					reply_markup: {
						inline_keyboard: [
							[{ text: "üì§ –í—ã–ø–ª–∞—Ç–∏—Ç—å", callback_data: `withdraw${x.owner}` }],
							[{ text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å", callback_data: `declineback${x.owner}` }],
							[{ text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data: `decline${x.owner}` }]
						]
					}
				});
			});
		}

		if(message.text === "üì¨ –†–∞—Å—Å—ã–ª–∫–∞") {
			await message.user.set("menu", "selectAuditory");
			return message.send(`–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é.

0.25	‚Äî	25%
0.50	‚Äî	50%
0.75	‚Äî	75%
1		‚Äî	100%`, {
				reply_markup: {
					keyboard: [["0.25", "0.50"], ["0.75", "1"], ["‚õîÔ∏è –û—Ç–º–µ–Ω–∞"]],
					resize_keyboard: true
				}
			});
		}

		if(message.text === "/admin") return message.send(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.`, {
			reply_markup: {
				keyboard: keyboards.admin,
				resize_keyboard: true
			}
		});
	}
});

bot.on("callback_query", async (query) => {
	const { message } = query;
	message.user = await User.findOne({ id: message.chat.id });

	let ban = await Ban.findOne({ id: message.user.id });
	if(ban) return bot.answerCallbackQuery(query.id, "–ó–∞–±–∞–Ω–µ–Ω!!!");

	if(query.data.startsWith("subcheck-")) {
		let username = query.data.split("subcheck-")[1];
		let channel = await Channel.findOne({ username: username });

		if(!channel) return;
		if(channel.completed.find((x) => x.id === message.user.id)) return;
		
		bot.getChatMember(`@${channel.username}`, message.user.id).then(async (res) => {
			if(res.status === "left") return bot.answerCallbackQuery(query.id, "–í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!");
			bot.editMessageText(messages.sub_end, {
				chat_id: message.chat.id,
				message_id: message.message_id
			});

			await message.user.inc("balance", settings.pps);

			channel.completed.push({
				id: message.user.id,
				time: Date.now(),
				unfollow: false
			});

			await channel.save();

			if(channel.completed.length >= channel.count) {
				await bot.sendMessage(channel.owner, `‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ @${channel.username} –∑–∞–≤–µ—Ä—à—ë–Ω!`);
				await channel.remove();
			}

			let ref2st		=		await User.findOne({ id: message.user.ref });
			if(!ref2st) return;

			await ref2st.inc("balance", settings.pps * settings.ref1st);

			let ref1st		=		await User.findOne({ id: ref2st.ref });
			if(!ref1st) return;

			await ref1st.inc("balance", settings.pps * settings.ref2st);
		}).catch(async (err) => {
			if(err.response.body.description === "Bad Request: CHAT_ADMIN_REQUIRED") {
				bot.editMessageText("–ó–∞–∫–∞–∑—á–∏–∫ —É–±—Ä–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª.", {
					chat_id: message.chat.id,
					message_id: message.message_id
				});

				bot.sendMessage(channel.owner, "–í—ã —É–±—Ä–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ —É –±–æ—Ç–∞. –ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω.");
				await channel.remove();
			}
		});
	}

	if(query.data.startsWith("skipChannel")) {
		let username	=	query.data.split("skipChannel-");
		let channel		=	await Channel.findOne({ username: username });

		if(!channel) return;
		channel.completed.push({ id: message.user.id, time: Date.now(), unfollow: true });

		await channel.save();
		return bot.editMessageText(`–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª.`, {
			chat_id: message.chat.id,
			message_id: message.message_id
		});
	}

	if(admins.indexOf(message.user.id) !== -1) {
		if(query.data.startsWith("sponsorGive")) {
			let id			=		Number(query.data.split("sponsorGive")[1]);
			let user		=		await User.findOne({ id: id });

			await user.inc("balance", 2);
			bot.sendMessage(id, `‚úÖ –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏–ª–∏ 2 —Ä—É–±–ª—è –Ω–∞ –±–∞–ª–∞–Ω—Å.`);

			let completed	=		new Youtube({ id: id });
			await completed.save();

			return bot.answerCallbackQuery(query.id, "–ì–æ—Ç–æ–≤–æ.");
		}

		if(query.data.startsWith("sponsorDeny")) {
			let id			=		Number(query.data.split("sponsorDeny")[1]);
			bot.sendMessage(id, `‚ùå –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ!`);

			return bot.answerCallbackQuery(query.id, "–ì–æ—Ç–æ–≤–æ.");
		}

		if(query.data.startsWith("withdraw")) {
			let id			=		Number(query.data.split("withdraw")[1]);
			let ticket		=		await Ticket.findOne({ owner: id });

			if(!ticket) return bot.answerCallbackQuery(query.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");

			await wallet.toWallet({
				account: "+" + ticket.wallet,
				amount: ticket.amount,
				comment: "@NewProfitBot"
			}, (err, success) => {});

			bot.sendMessage(ticket.owner, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.");
			bot.sendMessage("@newprofitpay", `ü§ñ <b>–ë—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –≤—ã–ø–ª–∞—Ç–∞!</b>
üí∞ <b>–°—É–º–º–∞: ${Math.floor(ticket.amount)}‚ÇΩ</b>
			
‚úÖ <b>–•–æ—á–µ—à—å —Ç–æ–∂–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å?</b>
‚≠êÔ∏è <b>–ó–∞—Ö–æ–¥–∏ –∫ –Ω–∞–º! –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞—Ö, –ø—Ä–æ—Å–º–æ—Ç—Ä–∞—Ö, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è—Ö.</b>`, {
				parse_mode: "HTML",
				reply_markup: {
					inline_keyboard: [[
						{ text: "üí∞ –ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞", url: `https://t.me/NewProfitBot` }
					]]
				}
			});


			await ticket.remove();
			bot.editMesssageText("–î–µ–Ω—å–≥–∏ –≤—ã–ø–ª–∞—á–µ–Ω—ã.", {
				chat_id: message.chat.id,
				message_id: message.message_id
			});

			return;
		}

		if(query.data.startsWith("declineback")) {
			let id			=		Number(query.data.split("declineback")[1]);
			let ticket		=		await Ticket.findOne({ owner: id });

			if(!ticket) return bot.answerCallbackQuery(query.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");

			await bot.sendMessage(ticket.owner, "–í–∞–º –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –≤—ã–ø–ª–∞—Ç—É –∏ –≤–µ—Ä–Ω—É–ª–∏ –¥–µ–Ω—å–≥–∏.");
			await User.findOne({ id: id }).then(async (user) => await user.inc("balance", ticket.amount));

			await ticket.remove();
			await bot.answerCallbackQuery(query.id, "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏ –≤ –≤—ã–ø–ª–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏ –≤–µ—Ä–Ω—É–ª–∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å.");
		}

		if(query.data.startsWith("decline")) {
			let id			=		Number(query.data.split("decline")[1]);
			let ticket		=		await Ticket.findOne({ owner: id });

			if(!ticket) return bot.answerCallbackQuery(query.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");

			await ticket.remove();
			await bot.answerCallbackQuery(query.id, "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏ –≤ –≤—ã–ø–ª–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤.");
		}
	}
});

User.prototype.inc		=		function(field, value = 1) {
	this[field] 		+=		value;
	return this.save();
}

User.prototype.dec 		= 		function(field, value = 1) {
	this[field] 		-= 		value;
	return this.save();
}

User.prototype.set 		= 		function(field, value) {
	this[field] 		=	 	value;
	return this.save();
}

setInterval(async () => {
	await writeStrikes();
}, 600000);

async function writeStrikes() {
	let channels = await Channel.find();
	await channels.map(async (x) => {
		x.completed.filter((a) => Date.now() < 604800000 + a.time && !a.unfollow).map(async (a) => {
			let unfollow = await Unfollow.findOne({ id: a.id, username: x.username });
			if(unfollow) return;

			let res = await bot.getChatMember("@" + x.username, a.id).catch((err) => console.error(err.response.body));

			if(res.status !== "left") return;
			let user = await User.findOne({ id: a.id });

			await user.dec("balance", 1);
			bot.sendMessage(a.id, `‚ö†Ô∏è –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–∞–Ω–∞–ª–∞ @${x.username} –∏ –ø–æ–ª—É—á–∏–ª–∏ —à—Ç—Ä–∞—Ñ (1 —Ä—É–±–ª—å)`);

			let _unfollow = new Unfollow({ id: a.id, username: x.username });
			await _unfollow.save();
		});
	});

	return true;
}
